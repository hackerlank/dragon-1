#!/usr/bin/env python
import sys
import os
import imp
from glob import glob
from SCons.Script import *
from dragon import *

#######################################################
# target build append source exts config
#######################################################
TARGET_BUILD_SOURCE_AUTO_APPEND_SUFFIXS_MAP = DEFAULT_TARGET_BUILD_SOURCE_AUTO_APPEND_SUFFIXS_MAP

#######################################################
# reusable functions and data structures
#######################################################
def LoadTool(name, env, **kw):
    #config_path = GetBuildPath('#/build/tools/scons')
    config_path = GetBuildPath(project.getBase() + '/build/tools/scons')
    
    file, path, desc = imp.find_module(name, [config_path])
    module = imp.load_module(name, file, path, desc)
    module.generate(env, **kw)
    
def MergeListUnique(item_list, items):
    for item in items: 
        if not item in item_list: item_list.append(item)

def MergeItemUnique(item_list, item):
    if not item in item_list: item_list.append(item)

def GlobSources(drct, patterns, excluded_files=[]):
    #root = GetBuildPath('#'+drct)
    root = GetBuildPath(project.getBase() + '/' + drct)

    files = []
    for pattern in Split(patterns):
        files += glob(root+'/'+pattern)
    return [drct+'/'+os.path.basename(x) for x in  files if os.path.basename(x) not in excluded_files]

def GlobTargetSources(drct, patterns, excluded_files=[]):
    source_files = GlobSources(drct, patterns, excluded_files)
    new_files = []

    for source_file in source_files:
        if source_file:
            new_files += AddPlatformTargetSource(project, source_file)

    return new_files

def GetDirPath(dir):
    return project.getBase() + '/' + dir
    #return '#/' + dir

def GetDirPaths(paths):
    dirs = []
    for path in Split(paths):
        dirs += [GetDirPath(path)]
    return dirs

def DeclareBuildDir(dir):
    env.VariantDir(dir, GetDirPath(dir), duplicate=0)
    
def GetIncludeDirs(modules, exclude=None):
    dirs = []
    for module in Split(modules):
        if project.hasModule(module) and not module == exclude:
            dirs += project.getModule(module).GetIncludeDirs()
        else:
            dirs += [GetDirPath(module)]
    return dirs

def GetLibrarieDirs(modules, exclude=None):
    dirs = []
    for module in Split(modules):
        if project.hasModule(module) and not module == exclude:
            dirs += project.getModule(module).GetLibrarieDirs()
    return dirs


def GetLibraries(modules):
    libs = []
    for module in Split(modules):
        if project.hasModule(module):
            libs += project.getModule(module).GetLibraries()
        else:
            libs += [module]
    return libs

def GetBuildDirPath():
    return project.getBase() + '/build/targets/' + env['target'] + "/" + env['build_config']


def GetBuildTargetDir():
    return project.getBase() + '/targets/' + env['target'] + "/" + env['build_config']


class Module:
    def __init__(self, name, build_include_dirs = [], included_modules = [], 
        build_lib_dirs  = [], linked_modules = []):
        self.name               = name
        self.build_include_dirs = build_include_dirs
        self.included_modules   = included_modules
        self.build_lib_dirs     = build_lib_dirs
        self.linked_modules     = linked_modules
        self.product            = []
    def GetProduct(self):
        return self.product

    def GetLibraries(self):
        return [self.name] + GetLibraries(self.linked_modules)
        
    def GetIncludeDirs(self):
        return GetIncludeDirs(self.included_modules+self.build_include_dirs, self.name)

    def GetLibrarieDirs(self):
        return [GetBuildTargetDir()] + GetDirPaths(self.build_lib_dirs) + GetLibrarieDirs(self.included_modules + self.linked_modules, self.name)

class LibraryModule(Module):
    def __init__(self, name, 
                 build_source_dirs     = ['.'], 
                 build_source_files    = {},
                 source_root           = 'Source',
                 build_source_pattern  = ['*.c', '*.cpp', '*.cc'], 
                 build_include_dirs    = [], 
                 build_lib_dirs        = [], 
                 included_modules      = [], 
                 included_only_modules = [],
                 linked_modules        = [],
                 environment           = None,
                 excluded_files        = [],
                 extra_cpp_defines     = [],
                 shared                = False,
                 install               = False) :
        self.shared = shared
        build_source_dirs = [source_root+'/'+drct for drct in build_source_dirs]
        Module.__init__(self, 
                        name, 
                        Split(build_include_dirs),
                        Split(included_modules) + Split(included_only_modules) + Split(build_source_dirs), 
                        Split(build_lib_dirs),
                        Split(linked_modules) + Split(included_modules))

        if environment is None:
            self.env = env.Clone()
        else:
            self.env = environment.Clone()


        self.env.AppendUnique(CPPDEFINES = extra_cpp_defines)
        
        lib_paths = self.GetLibrarieDirs()
        self.env.AppendUnique(LIBPATH = lib_paths)
        #for lib_path in lib_paths:
        #    env.AppendUnique(LINKFLAGS = ['-L' + lib_path])

        # store this new object in the module dictionary
        project.addModule(name, self)
                
        # for each source drct to build, create a VariantDir
        # to say where we want the object files to be built,
        # and compute the list of source files to build
        sources = []
        for drct in Split(build_source_dirs):
            DeclareBuildDir(drct)
            sources += GlobTargetSources(drct, build_source_pattern, excluded_files)
            
        # add cherry-picked files
        for drct in build_source_files.keys():
            pattern = build_source_files[drct]
            drct_path = source_root+'/'+drct
            DeclareBuildDir(drct_path)
            sources += GlobTargetSources(drct_path, pattern)

        # calculate our build include path
        cpp_path = GetIncludeDirs(Split(self.build_include_dirs) + Split(build_source_dirs) + self.included_modules + self.linked_modules)

        # the product is a library
        self.env.AppendUnique(CPPPATH=cpp_path)

        libs = GetLibraries(self.linked_modules)

        #PDB
        if self.env['build_config'] == "debug":
            self.env['PDB'] = name + '.pdb'

        # pre processor
        if env.has_key('DRAGON_MODULE_PRE_PROCESSOR'):
            if (not env['DRAGON_MODULE_PRE_PROCESSOR'](target=name, source= sources, env=env)):
                return;

        if shared is False:
            self.product = self.env.Library(target=name, LIBS=libs, source=sources)
        else:
            self.product = self.env.SharedLibrary(target=name, LIBS=libs, source=sources)
            
        # post processor
        if env.has_key('DRAGON_MODULE_POST_PROCESSOR'):
            if (not env['DRAGON_MODULE_POST_PROCESSOR'](target=name, prog= self.product, env=env)):
                return;

        self.env.Alias(name, self.product)

        # copy to Targets folder
        if install is True:
            #inst = env.Install(dir=env.GetBuildPath('#/targets/'+env['target']+'/'+env['build_config']), source=self.product)
            inst = env.Install(dir=env.GetBuildPath(project.getBase() + '/targets/'+env['target']+'/'+env['build_config']), source=self.product)
            if env['build_config'] == 'release' and env.has_key('STRIP'):
                env.AddPostAction(inst, env['STRIP']+' $TARGETS');

            env.Install(dir=env.GetBuildPath('#/' + LIB_REPO_PATH + '/' + env['target'] + '/' + env['build_config']), source=self.product)
 
    def GetLibraries(self):
        if sys.platform == "win32" and self.shared and len(self.product) > 0:
          libs = [];
          libs.append(self.name)
          libs += GetLibraries(self.linked_modules)  
          return libs
        else:
          return [self.name] + GetLibraries(self.linked_modules)


def Application(name, 
                source_root           = 'Source',
                build_source_dirs     = ['.'], 
                build_source_files    = {}, 
                build_source_pattern  = ['*.c', '*.cpp'], 
                excluded_files        = [],
                build_include_dirs    = [], 
                build_lib_dirs        = [],                 
                deps                  = [], 
                install               = False):
    build_source_dirs = [source_root+'/'+drct for drct in build_source_dirs]

    libs = GetLibraries(deps)
    #print "libs:", libs

    cpp_paths = GetIncludeDirs(Split(build_include_dirs) + deps)
    #print "cpp_paths:", cpp_paths

    lib_paths = GetDirPaths(Split(build_lib_dirs)) + GetLibrarieDirs(deps)
    #print "lib_paths:", lib_paths

    env.AppendUnique(LIBPATH = lib_paths)

    # for each source drct to build, create a VariantDir
    # to say where we want the object files to be built,
    # and compute the list of source files to build
    sources = []
    for drct in Split(build_source_dirs):
        DeclareBuildDir(drct)
        sources += GlobTargetSources(drct, build_source_pattern, excluded_files)
        
    # add cherry-picked files
    for drct in build_source_files.keys():
        pattern = build_source_files[drct]
        drct_path = source_root+'/'+drct

        DeclareBuildDir(drct_path)
        sources += GlobTargetSources(drct_path, pattern)

    sources = sources + env['DRAGON_EXTRA_EXECUTABLE_OBJECTS']

    # pre processor
    if env.has_key('DRAGON_MODULE_PRE_PROCESSOR'):
        if (not env['DRAGON_MODULE_PRE_PROCESSOR'](target=name, source= sources, env=env)):
            return;

    prog = env.Program(target=name, 
                       source= sources,
                       LIBS=libs, CPPPATH=cpp_paths)

    # post processor
    if env.has_key('DRAGON_MODULE_POST_PROCESSOR'):
        if (not env['DRAGON_MODULE_POST_PROCESSOR'](target=name, prog= prog, env=env)):
            return;
    
    # copy to Targets folder
    if install is True:
        #inst = env.Install(dir=env.GetBuildPath('#/targets/'+env['target']+'/'+env['build_config']), source=prog)
        inst = env.Install(dir=env.GetBuildPath(project.getBase() + '/targets/' + env['target'] + '/'+env['build_config']), source=prog)
        if env['build_config'] == 'release' and env.has_key('STRIP'):
            env.AddPostAction(inst, env['STRIP']+' $TARGETS');

    if env["test"] or env["debug"]:
        env.RunProgram(target= "#run-" + name, source=inst)


### Add Test Builder
def RunTarget(target, source, env):
    if env.has_key("BEFORE_RUN_FUNC"):
        env['BEFORE_RUN_FUNC'](target, source, env)

    if env.has_key('RUN_FUNC'):
        env["RUN_FUNC"](target, source, env)

    if env.has_key('AFTER_RUN_FUNC'):
        env['AFTER_RUN_FUNC'](target, source, env)

    return None



#######################################################
# Main Build
#######################################################
Import("env")
Import('project')

project = Project(env, project)
project.init()

### defaults
env['DRAGON_EXTRA_LIBS'] = []
env['DRAGON_EXTRA_EXECUTABLE_OBJECTS'] = []

if (env['build_config'] == 'debug'):
    env.AppendUnique(CPPDEFINES=['DRAGON_DEBUG', 'DRAGON_CONFIG_ENABLE_LOGGING'])
else:
    env.AppendUnique(CPPDEFINES=['NDEBUG', 'DRAGON_CONFIG_ENABLE_LOGGING'])

### setup test enviriment
runBuilder = env.Builder(action = RunTarget, 
    target_factory=SCons.Node.FS.default_fs.Entry,
    multi=0)
env['BUILDERS']['RunProgram'] = runBuilder

### default library type
if (env['lib_type'] == 'static'):
    env['SHARED'] = False
elif(env['lib_type'] == 'shared'):
    env['SHARED'] = True
else:
    raise Exception('the lib type is not assign!')
    
### try to read in any target specific configuration
#target_config_file = env.GetBuildPath('#/build/targets/'+env['target']+'/Config.scons')
target_config_file = env.GetBuildPath(project.getBase() + '/build/targets/'+env['target']+'/Config.scons')
if os.path.exists(target_config_file):
    # Load the target-specific config file    
    execfile(target_config_file)

#######################################################
# modules
#
# Usage:
#
# The LibraryModule() function declares a code module
# The included_modules parameter is a list of all the modules and/or directories
# that will be added to the include path when building this module AND to
# the include path of any other module that depends on this one.
# The linked_modules parameter is a list of all the modules and/or directories
# that are necessary to build this module. These modules will be added to
# the include path of this module, but not to that of the modules that depend
# on this module. The modules that depend on this module, however, will 
# automatically link with the linked_modules. 
# Note that the included_modules list is automatically added to the 
# linked_modules list, so that you do not need to list in linked_modules
# the modules that are already listed in included_modules.
# If a module needs to export an include path to its dependents that
# is not a module that the dependent can link with (ex: an include dir),
# list it in the included_only_modules.
# To summarize: included_modules should list all the modules that users
# of the public interface should depend on; linked_modules should list
# all the modules not listed in included_modules that are used by the
# module's implementation only.
#######################################################

# Build Config
THIRD_PARTY_SOURCE_ROOT = '../../third_party'

# lib openal
OpenAL32_SOURCES = Split("""
    alAuxEffectSlot.c
    alBuffer.c
    alEffect.c
    alError.c
    alExtension.c
    alFilter.c
    alListener.c
    alSource.c
    alState.c
    alThunk.c
""")

Alc_SOURCES = Split("""
    ALc.c
    ALu.c
    alcConfig.c
    alcDedicated.c
    alcEcho.c
    alcModulator.c
    alcReverb.c
    alcRing.c
    alcThread.c
    bs2b.c
    helpers.c
    panning.c
    hrtf.c
    mixer.c
    mixer_c.c
""")

LibraryModule(
    name                  = 'openal',
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/openal-soft-1.15.1",
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/openal-soft-1.15.1/build",
        THIRD_PARTY_SOURCE_ROOT + "/openal-soft-1.15.1/OpenAL32/include",
        THIRD_PARTY_SOURCE_ROOT + "/openal-soft-1.15.1/include"
    ],  
    build_source_dirs     = [],         
    build_source_files    = {
        "OpenAL32" : OpenAL32_SOURCES,
        "Alc" : Alc_SOURCES
    },    
    extra_cpp_defines     = ["AL_ALEXT_PROTOTYPES"],     
    shared                = False,                    
    install               = True
)


# dragon3d-core
dragon3d_core_SOURCES = {
    "com/dragon3d/launcher" : Split("""
        AppLauncher.cc
    """),
    "com/dragon3d/framework" : Split("""
        Application.cc
        FrameHandler.cc
    """),

    "com/dragon3d/scene" : Split("""
        GameObject.cc
        Component.cc
        Transform.cc
        Behaviour.cc

        AbstractScene.cc
        SimpleScene.cc
    """),

    "com/dragon3d/scene/camera" : Split("""
        Camera.cc
    """),

    "com/dragon3d/scene/model" : Split("""
        Mesh.cc
        Texture.cc
        RenderTexture.cc
        Material.cc
        Model.cc
    """),
    "com/dragon3d/scene/model/geometry" : Split("""
        Box.cc
    """),
    "com/dragon3d/scene/model/shader" : Split("""
        Shader.cc
    """),

    "com/dragon3d/scene/audio" : Split("""
        AudioSource.cc
        AudioListener.cc
    """),

    "com/dragon3d/input" : Split("""
        inputManager.cc
    """),

    "com/dragon3d/output" : Split("""
        OutputManager.cc
    """),
    "com/dragon3d/output/graphics" : Split("""
        GraphicsDevice.cc
        GraphicsOutputController.cc
    """),
    "com/dragon3d/output/graphics/renderer" : Split("""
        support_graphics_renderer.cc
    """),
    "com/dragon3d/util" : Split("""
        Timer.cc
    """),

    "com/dragon3d/util/math" : Split("""
        Vector2.cc
        Vector3.cc
        Vector4.cc
        Color.cc
        Color32.cc
        Mathf.cc
        Quaternion.cc
        Matrix4x4.cc
        Ray3.cc
        Rect.cc
        Plane.cc
    """),

    "com/dragon3d/util/debug" : Split("""
        PlacementGrid.cc
    """),

    "com/dragon3d/util/assets" : Split("""
        Resource.cc
    """)

}

LibraryModule(
    name                  = 'dragon3d-core',
    build_include_dirs    = [
        'include'
    ],
    build_source_files    = dragon3d_core_SOURCES,
    extra_cpp_defines     = [
        'DRAGON_SHARED', 
        'BUILDING_DRAGON_SHARED',
        'ENABLE_LOG'
    ],
    source_root           = 'src',
    included_modules      = [
        'dragon'
    ],
    linked_modules        = env['DRAGON_EXTRA_LIBS'], 
    shared                = env['SHARED'],
    install               = True
)


# dragon3d-core-test
dragon3d_core_test_SOURCES = {
    "com/dragon3d/util/math" : Split("""
        Vector3Test.cc
        QuaternionTest.cc
        Matrix4x4Test.cc
    """),
    "." : Split("""
        TestMain.cc
    """)
}

Application(
    name                  = 'dragon3d-core-test', 
    source_root           = 'test',
    build_source_files    = dragon3d_core_test_SOURCES,
    deps                  = [ 
        'dragon3d-core',
        'gtest'
    ],          
    install               = True
)

