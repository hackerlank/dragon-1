#!/usr/bin/env python
import sys
import os
from SCons.Script import *

EnsureSConsVersion(0,98,1)

#######################################################
# reusable functions and data structures
#######################################################

# Platform to Target Map (specifies which default target to build on a platform)
PLATFORM_TO_TARGET_MAP = { 
    'linux-i386' : 'x86-unknown-linux',
    'linux2'     : 'x86-unknown-linux',
    'win32'      : 'x86-microsoft-win32',
    'cygwin'     : 'x86-unknown-cygwin',
    'darwin'     : 'universal-apple-macosx'
}
  
CROSS_PLATFORMS   = ['ppu-sony-ps3', 'arm-unknown-linux', 'arm-gp2x-linux', 'arm-android-linux']
SPECIAL_PLATFORMS = ['universal-apple-macosx-xcode']
  
def DefaultTarget():
    if PLATFORM_TO_TARGET_MAP.has_key(sys.platform):
        return PLATFORM_TO_TARGET_MAP[sys.platform]
    else:
        return None
        
#######################################################
# Main Build
#######################################################
options = Variables()
options.AddVariables(
    EnumVariable('target', 'build target', DefaultTarget(), allowed_values=PLATFORM_TO_TARGET_MAP.values()+CROSS_PLATFORMS+SPECIAL_PLATFORMS),
    BoolVariable('stop_on_warning', 'Stop the build on warnings', False),
    ListVariable('build_config', 'build configurations', 'debug', names=['debug', 'release']),
    BoolVariable('test', 'try run test builder', False)
)

env = Environment(variables=options, TARGET_ARCH='x86')
Help(options.GenerateHelpText(env))

if 'CXX' in os.environ:
    env['CXX'] = os.environ['CXX']
if 'CC' in os.environ:
    env['CC'] = os.environ['CC']
    
if not hasattr(env, 'Clone'): env.Clone = env.Copy ## old scons compatibility

### Add Test Builder
def RunTest(target, source, env):
    ar = env['AR']
    #os.system("/Users/yubing/Software/android-ndk-r8e/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-run")
    os.system("/Users/yubing/Software/android-ndk-r8e/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-gdb " + str(source[0]))
    #os.system(str(source[0]))
    return None

testBuilder = env.Builder(action = RunTest, 
    target_factory=SCons.Node.FS.default_fs.Entry,
    multi=0)
#env.Append(BUILDERS = {'Test' : testBuilder})
env['BUILDERS']['Test'] = testBuilder

base_env = env

### special build for x86-microsoft-win32
#if env['target'] == 'x86-microsoft-win32':
#    import subprocess
#    for build_config in env['build_config']:
#        env = base_env.Clone()
#        env['build_config'] = build_config
#        print '********** Configuring Build Target =', env['target'], '/', build_config, '********' 
#        retVal = subprocess.call(["python", "Build.py", "-r", "-s", "dragon.sln", "-b", build_config], cwd=env.GetBuildPath('#/build/targets/x86-microsoft-win32-vs2010/'))  
#        if (retVal != 0):
#            sys.exit(retVal)

### special build for universal-apple-macosx-xcode
#elif env['target'] == 'universal-apple-macosx-xcode':
#    import subprocess
#    for build_config in env['build_config']:    
#        env = base_env.Clone()
#        env['build_config'] = build_config
#       print '********** Configuring Build Target =', env['target'], '/', build_config, '********' 
#        retVal = subprocess.call(["python", "../../tools/scripts/XCodeMake.py", "-p", "Platinum.xcodeproj", "-t", "All", "-s", "macosx", "-b", build_config], cwd=env.GetBuildPath('#/Build/Targets/universal-apple-macosx/'))  
#        if (retVal != 0):
#            sys.exit(retVal)

#else:

Import('project')

### call the actual build script for each build config
for build_config in env['build_config']:
    env = base_env.Clone()
    env['build_config'] = build_config
    print '********** Configuring Build', project['name'],'/', 'Target =', env['target'], '/', build_config, '********'  
    SConscript('Build.scons', variant_dir='targets/'+env['target']+'/'+build_config, exports='env project', duplicate=0)
