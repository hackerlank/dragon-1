#!/usr/bin/env python
import sys
import os
import imp
from glob import glob
from SCons.Script import *
from dragon import *

#######################################################
# target build append source exts config
#######################################################
TARGET_BUILD_SOURCE_AUTO_APPEND_SUFFIXS_MAP = DEFAULT_TARGET_BUILD_SOURCE_AUTO_APPEND_SUFFIXS_MAP

#######################################################
# reusable functions and data structures
#######################################################
def LoadTool(name, env, **kw):
    #config_path = GetBuildPath('#/build/tools/scons')
    config_path = GetBuildPath(project.getBase() + '/build/tools/scons')
    
    file, path, desc = imp.find_module(name, [config_path])
    module = imp.load_module(name, file, path, desc)
    module.generate(env, **kw)
    
def MergeListUnique(item_list, items):
    for item in items: 
        if not item in item_list: item_list.append(item)

def MergeItemUnique(item_list, item):
    if not item in item_list: item_list.append(item)

def GlobSources(drct, patterns, excluded_files=[]):
    #root = GetBuildPath('#'+drct)
    root = GetBuildPath(project.getBase() + '/' + drct)

    files = []
    for pattern in Split(patterns):
        files += glob(root+'/'+pattern)
    return [drct+'/'+os.path.basename(x) for x in  files if os.path.basename(x) not in excluded_files]

def GlobTargetSources(drct, patterns, excluded_files=[]):
    source_files = GlobSources(drct, patterns, excluded_files)
    new_files = []

    for source_file in source_files:
        if source_file:
            new_files += AddPlatformTargetSource(project, source_file)

    return new_files

def GetDirPath(dir):
    return project.getBase() + '/' + dir
    #return '#/' + dir

def GetDirPaths(paths):
    dirs = []
    for path in Split(paths):
        dirs += [GetDirPath(path)]
    return dirs

def DeclareBuildDir(dir):
    env.VariantDir(dir, GetDirPath(dir), duplicate=0)
    
def GetIncludeDirs(modules, exclude=None):
    dirs = []
    for module in Split(modules):
        if project.hasModule(module) and not module == exclude:
            dirs += project.getModule(module).GetIncludeDirs()
        else:
            dirs += [GetDirPath(module)]
    return dirs

def GetLibrarieDirs(modules, exclude=None):
    dirs = []
    for module in Split(modules):
        if project.hasModule(module) and not module == exclude:
            dirs += project.getModule(module).GetLibrarieDirs()
    return dirs


def GetLibraries(modules):
    libs = []
    for module in Split(modules):
        if project.hasModule(module):
            libs += project.getModule(module).GetLibraries()
        else:
            libs += [module]
    return libs

def GetBuildDirPath():
    return project.getBase() + '/build/targets/' + env['target'] + "/" + env['build_config']


def GetBuildTargetDir():
    return project.getBase() + '/targets/' + env['target'] + "/" + env['build_config']


class Module:
    def __init__(self, name, build_include_dirs = [], included_modules = [], 
        build_lib_dirs  = [], linked_modules = []):
        self.name               = name
        self.build_include_dirs = build_include_dirs
        self.included_modules   = included_modules
        self.build_lib_dirs     = build_lib_dirs
        self.linked_modules     = linked_modules
        self.product            = []
    def GetProduct(self):
        return self.product

    def GetLibraries(self):
        return [self.name] + GetLibraries(self.linked_modules)
        
    def GetIncludeDirs(self):
        return GetIncludeDirs(self.included_modules+self.build_include_dirs, self.name)

    def GetLibrarieDirs(self):
        return [GetBuildTargetDir()] + GetDirPaths(self.build_lib_dirs) + GetLibrarieDirs(self.included_modules + self.linked_modules, self.name)

class LibraryModule(Module):
    def __init__(self, name, 
                 build_source_dirs     = ['.'], 
                 build_source_files    = {},
                 source_root           = 'Source',
                 build_source_pattern  = ['*.c', '*.cpp', '*.cc'], 
                 build_include_dirs    = [], 
                 build_lib_dirs        = [], 
                 included_modules      = [], 
                 included_only_modules = [],
                 linked_modules        = [],
                 environment           = None,
                 excluded_files        = [],
                 extra_cpp_defines     = [],
                 shared                = False,
                 install               = False) :
        self.shared = shared
        build_source_dirs = [source_root+'/'+drct for drct in build_source_dirs]
        Module.__init__(self, 
                        name, 
                        Split(build_include_dirs),
                        Split(included_modules) + Split(included_only_modules) + Split(build_source_dirs), 
                        Split(build_lib_dirs),
                        Split(linked_modules) + Split(included_modules))

        if environment is None:
            self.env = env.Clone()
        else:
            self.env = environment.Clone()


        self.env.AppendUnique(CPPDEFINES = extra_cpp_defines)
        
        lib_paths = self.GetLibrarieDirs()
        self.env.AppendUnique(LIBPATH = lib_paths)
        #for lib_path in lib_paths:
        #    env.AppendUnique(LINKFLAGS = ['-L' + lib_path])

        # store this new object in the module dictionary
        project.addModule(name, self)
                
        # for each source drct to build, create a VariantDir
        # to say where we want the object files to be built,
        # and compute the list of source files to build
        sources = []
        for drct in Split(build_source_dirs):
            DeclareBuildDir(drct)
            sources += GlobTargetSources(drct, build_source_pattern, excluded_files)
            
        # add cherry-picked files
        for drct in build_source_files.keys():
            pattern = build_source_files[drct]
            drct_path = source_root+'/'+drct
            DeclareBuildDir(drct_path)
            sources += GlobTargetSources(drct_path, pattern)

        # calculate our build include path
        cpp_path = GetIncludeDirs(Split(self.build_include_dirs) + Split(build_source_dirs) + self.included_modules + self.linked_modules)

        # the product is a library
        self.env.AppendUnique(CPPPATH=cpp_path)

        libs = GetLibraries(self.linked_modules)

        #PDB
        if self.env['build_config'] == "debug":
            self.env['PDB'] = name + '.pdb'

        # pre processor
        if env.has_key('DRAGON_MODULE_PRE_PROCESSOR'):
            if (not env['DRAGON_MODULE_PRE_PROCESSOR'](target=name, source= sources, env=env)):
                return;

        if shared is False:
            self.product = self.env.Library(target=name, LIBS=libs, source=sources)
        else:
            self.product = self.env.SharedLibrary(target=name, LIBS=libs, source=sources)
            
        # post processor
        if env.has_key('DRAGON_MODULE_POST_PROCESSOR'):
            if (not env['DRAGON_MODULE_POST_PROCESSOR'](target=name, prog= self.product, env=env)):
                return;

        self.env.Alias(name, self.product)

        # copy to Targets folder
        if install is True:
            #inst = env.Install(dir=env.GetBuildPath('#/targets/'+env['target']+'/'+env['build_config']), source=self.product)
            inst = env.Install(dir=env.GetBuildPath(project.getBase() + '/targets/'+env['target']+'/'+env['build_config']), source=self.product)
            if env['build_config'] == 'release' and env.has_key('STRIP'):
                env.AddPostAction(inst, env['STRIP']+' $TARGETS');

            env.Install(dir=env.GetBuildPath('#/' + LIB_REPO_PATH + '/' + env['target'] + '/' + env['build_config']), source=self.product)
 
    def GetLibraries(self):
        if sys.platform == "win32" and self.shared and len(self.product) > 0:
          libs = [];
          libs.append(self.name)
          libs += GetLibraries(self.linked_modules)  
          return libs
        else:
          return [self.name] + GetLibraries(self.linked_modules)


def Application(name, 
                source_root           = 'Source',
                build_source_dirs     = ['.'], 
                build_source_files    = {}, 
                build_source_pattern  = ['*.c', '*.cpp'], 
                excluded_files        = [],
                build_include_dirs    = [], 
                build_lib_dirs        = [],                 
                deps                  = [], 
                install               = False):
    build_source_dirs = [source_root+'/'+drct for drct in build_source_dirs]

    libs = GetLibraries(deps)
    #print "libs:", libs

    cpp_paths = GetIncludeDirs(Split(build_include_dirs) + deps)
    #print "cpp_paths:", cpp_paths

    lib_paths = GetDirPaths(Split(build_lib_dirs)) + GetLibrarieDirs(deps)
    #print "lib_paths:", lib_paths

    env.AppendUnique(LIBPATH = lib_paths)

    # for each source drct to build, create a VariantDir
    # to say where we want the object files to be built,
    # and compute the list of source files to build
    sources = []
    for drct in Split(build_source_dirs):
        DeclareBuildDir(drct)
        sources += GlobTargetSources(drct, build_source_pattern, excluded_files)
        
    # add cherry-picked files
    for drct in build_source_files.keys():
        pattern = build_source_files[drct]
        drct_path = source_root+'/'+drct

        DeclareBuildDir(drct_path)
        sources += GlobTargetSources(drct_path, pattern)

    sources = sources + env['DRAGON_EXTRA_EXECUTABLE_OBJECTS']

    # pre processor
    if env.has_key('DRAGON_MODULE_PRE_PROCESSOR'):
        if (not env['DRAGON_MODULE_PRE_PROCESSOR'](target=name, source= sources, env=env)):
            return;

    prog = env.Program(target=name, 
                       source= sources,
                       LIBS=libs, CPPPATH=cpp_paths)

    # post processor
    if env.has_key('DRAGON_MODULE_POST_PROCESSOR'):
        if (not env['DRAGON_MODULE_POST_PROCESSOR'](target=name, prog= prog, env=env)):
            return;
    
    # copy to Targets folder
    if install is True:
        #inst = env.Install(dir=env.GetBuildPath('#/targets/'+env['target']+'/'+env['build_config']), source=prog)
        inst = env.Install(dir=env.GetBuildPath(project.getBase() + '/targets/' + env['target'] + '/'+env['build_config']), source=prog)
        if env['build_config'] == 'release' and env.has_key('STRIP'):
            env.AddPostAction(inst, env['STRIP']+' $TARGETS');

    if env["test"] or env["debug"]:
        env.RunProgram(target= "#run-" + name, source=inst)


### Add Test Builder
def RunTarget(target, source, env):
    if env.has_key("BEFORE_RUN_FUNC"):
        env['BEFORE_RUN_FUNC'](target, source, env)

    if env.has_key('RUN_FUNC'):
        env["RUN_FUNC"](target, source, env)

    if env.has_key('AFTER_RUN_FUNC'):
        env['AFTER_RUN_FUNC'](target, source, env)

    return None


#######################################################
# Main Build
#######################################################
Import("env")
Import('project')

project = Project(env, project)
project.init()

### defaults
env['DRAGON_EXTRA_LIBS'] = []
env['DRAGON_EXTRA_EXECUTABLE_OBJECTS'] = []

if (env['build_config'] == 'debug'):
    env.AppendUnique(CPPDEFINES=['DRAGON_DEBUG', 'DRAGON_CONFIG_ENABLE_LOGGING'])
else:
    env.AppendUnique(CPPDEFINES=['NDEBUG', 'DRAGON_CONFIG_ENABLE_LOGGING'])

### setup test enviriment
runBuilder = env.Builder(action = RunTarget, 
    target_factory=SCons.Node.FS.default_fs.Entry,
    multi=0)
env['BUILDERS']['RunProgram'] = runBuilder

### default library type
if (env['lib_type'] == 'static'):
    env['SHARED'] = False
elif(env['lib_type'] == 'shared'):
    env['SHARED'] = True
else:
    raise Exception('the lib type is not assign!')

### try to read in any target specific configuration
#target_config_file = env.GetBuildPath('#/build/targets/'+env['target']+'/Config.scons')
target_config_file = env.GetBuildPath(project.getBase() + '/build/targets/'+env['target']+'/Config.scons')
if os.path.exists(target_config_file):
    # Load the target-specific config file    
    execfile(target_config_file)

#######################################################
# modules
#
# Usage:
#
# The LibraryModule() function declares a code module
# The included_modules parameter is a list of all the modules and/or directories
# that will be added to the include path when building this module AND to
# the include path of any other module that depends on this one.
# The linked_modules parameter is a list of all the modules and/or directories
# that are necessary to build this module. These modules will be added to
# the include path of this module, but not to that of the modules that depend
# on this module. The modules that depend on this module, however, will 
# automatically link with the linked_modules. 
# Note that the included_modules list is automatically added to the 
# linked_modules list, so that you do not need to list in linked_modules
# the modules that are already listed in included_modules.
# If a module needs to export an include path to its dependents that
# is not a module that the dependent can link with (ex: an include dir),
# list it in the included_only_modules.
# To summarize: included_modules should list all the modules that users
# of the public interface should depend on; linked_modules should list
# all the modules not listed in included_modules that are used by the
# module's implementation only.
#######################################################

# Neptune
THIRD_PARTY_SOURCE_ROOT = '../third_party'

# zip lib
LibraryModule(
    name                  = 'z',
    source_root           = THIRD_PARTY_SOURCE_ROOT,
    build_source_dirs     = ['zlib-1.2.3'],
    shared                = False,
    install               = True
)

# pcre lib
libpcre_SOURCES = Split("""
    pcre_byte_order.c 
    pcre_chartables.c
    pcre_compile.c 
    pcre_config.c 
    pcre_dfa_exec.c 
    pcre_exec.c 
    pcre_fullinfo.c 
    pcre_get.c 
    pcre_globals.c 
    pcre_jit_compile.c 
    pcre_maketables.c 
    pcre_newline.c 
    pcre_ord2utf8.c 
    pcre_refcount.c 
    pcre_string_utils.c 
    pcre_study.c 
    pcre_tables.c 
    pcre_ucd.c 
    pcre_valid_utf8.c 
    pcre_version.c 
    pcre_xclass.c   
""")

libpcre16_SOURCES = Split("""
    pcre16_byte_order.c \
    pcre16_chartables.c \
    pcre16_compile.c \
    pcre16_config.c \
    pcre16_dfa_exec.c \
    pcre16_exec.c \
    pcre16_fullinfo.c \
    pcre16_get.c \
    pcre16_globals.c \
    pcre16_jit_compile.c \
    pcre16_maketables.c \
    pcre16_newline.c \
    pcre16_ord2utf16.c \
    pcre16_refcount.c \
    pcre16_string_utils.c \
    pcre16_study.c \
    pcre16_tables.c \
    pcre16_ucd.c \
    pcre16_utf16_utils.c \
    pcre16_valid_utf16.c \
    pcre16_version.c \
    pcre16_xclass.c
""")

libpcre32_SOURCES = Split("""
    pcre32_byte_order.c 
    pcre32_chartables.c 
    pcre32_compile.c 
    pcre32_config.c 
    pcre32_dfa_exec.c 
    pcre32_exec.c 
    pcre32_fullinfo.c 
    pcre32_get.c 
    pcre32_globals.c 
    pcre32_jit_compile.c 
    pcre32_maketables.c 
    pcre32_newline.c 
    pcre32_ord2utf32.c 
    pcre32_refcount.c 
    pcre32_string_utils.c 
    pcre32_study.c 
    pcre32_tables.c 
    pcre32_ucd.c 
    pcre32_utf32_utils.c 
    pcre32_valid_utf32.c 
    pcre32_version.c 
    pcre32_xclass.c
""")

LibraryModule(
    name                  = 'pcre32',
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/pcre-8.33",
    ],  
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/pcre-8.33",
    build_source_dirs     = [],         
    build_source_files    = {
        "." : libpcre32_SOURCES
    },    
    extra_cpp_defines     = [
        'HAVE_CONFIG_H', 
        'LINK_SIZE=4', 
        'HAVE_STRERROR'

        'PCRE_STATIC'
    ],     
    shared                = False,                    
    install               = True
)


# lib unicode 
LibraryModule(
    name                  = 'unicode',
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/libunicode-0.4",
    ],  
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/libunicode-0.4",
    build_source_dirs     = [],         
    build_source_files    = {
        "." : "*.c",
        "iso" : "*.c",
        "jis" : "*.c",
        "msft" : "*.c"
    },    
    extra_cpp_defines     = [
        'HAVE_CONFIG_H', 
        'LINK_SIZE=4', 
        'HAVE_STRERROR'
    ],     
    shared                = False,                    
    install               = True
)

# lib tinyxml2
tinyxml2_SOURCES = Split("""
    tinyxml2.cpp
""")

LibraryModule(
    name                  = 'tinyxml2',
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/tinyxml2",
    ],  
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/tinyxml2",
    build_source_dirs     = [],         
    build_source_files    = {
        "." : tinyxml2_SOURCES
    },    
    extra_cpp_defines     = [],     
    shared                = False,                    
    install               = True
)


# lib jpeg 
libjpeg_SOURCES = Split("""
    jaricom.c jcapimin.c jcapistd.c jcarith.c jccoefct.c jccolor.c \
    jcdctmgr.c jchuff.c jcinit.c jcmainct.c jcmarker.c jcmaster.c \
    jcomapi.c jcparam.c jcprepct.c jcsample.c jctrans.c jdapimin.c \
    jdapistd.c jdarith.c jdatadst.c jdatasrc.c jdcoefct.c jdcolor.c \
    jddctmgr.c jdhuff.c jdinput.c jdmainct.c jdmarker.c jdmaster.c \
    jdmerge.c jdpostct.c jdsample.c jdtrans.c jerror.c jfdctflt.c \
    jfdctfst.c jfdctint.c jidctflt.c jidctfst.c jidctint.c jquant1.c \
    jquant2.c jutils.c jmemmgr.c

    jmemnobs.c
""")

LibraryModule(
    name                  = 'jpeg',
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/jpeg-9",
    ],  
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/jpeg-9",
    build_source_dirs     = [],         
    build_source_files    = {
        "." : libjpeg_SOURCES
    },    
    extra_cpp_defines     = [],     
    shared                = False,                    
    install               = True
)



# lib png 
libpng_SOURCES = Split("""
    png.c pngset.c pngget.c pngrutil.c pngtrans.c pngwutil.c \
    pngread.c pngrio.c pngwio.c pngwrite.c pngrtran.c \
    pngwtran.c pngmem.c pngerror.c pngpread.c
""")

LibraryModule(
    name                  = 'png',
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/lpng167",
    ],  
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/lpng167",
    build_source_dirs     = [],         
    build_source_files    = {
        "." : libpng_SOURCES
    },    
    extra_cpp_defines     = [],     
    shared                = False,                    
    install               = True
)

# lib gif
libgif_SOURCES = Split("""
    dgif_lib.c  \
    egif_lib.c  \
    gif_font.c  \
    gif_hash.c  \
    gif_hash.h  \
    gifalloc.c  \
    gif_err.c   \
    gif_lib_private.h
""")

LibraryModule(
    name                  = 'gif',
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/giflib-4.2.3",
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/giflib-4.2.3/lib",
    ],  
    build_source_dirs     = [],         
    build_source_files    = {
        "lib" : libgif_SOURCES
    },    
    extra_cpp_defines     = [],     
    shared                = False,                    
    install               = True
)

# lib tga
libtga_SOURCES = Split("""
    tgaio.c tga.c tgaread.c tgawrite.c  
""")

LibraryModule(
    name                  = 'tga',
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/libtga-ex-1.0.0",
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/libtga-ex-1.0.0/src",
    ],  
    build_source_dirs     = [],         
    build_source_files    = {
        "src" : libtga_SOURCES
    },    
    extra_cpp_defines     = [],     
    shared                = False,                    
    install               = True
)

# lib ogg
libogg_SOURCES = Split("""
    framing.c bitwise.c
""")

LibraryModule(
    name                  = 'ogg',
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/libogg-1.3.1",
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/libogg-1.3.1/include",
    ],  
    build_source_dirs     = [],         
    build_source_files    = {
        "src" : libogg_SOURCES
    },    
    extra_cpp_defines     = [],     
    shared                = False,                    
    install               = True
)

# lib vorbis
vorbis_SOURCES = Split("""
    mdct.c smallft.c block.c envelope.c window.c lsp.c \
    lpc.c analysis.c synthesis.c psy.c info.c \
    floor1.c floor0.c\
    res0.c mapping0.c registry.c codebook.c sharedbook.c\
    lookup.c bitrate.c\
    envelope.h lpc.h lsp.h codebook.h misc.h psy.h\
    masking.h os.h mdct.h smallft.h highlevel.h\
    registry.h scales.h window.h lookup.h lookup_data.h\
    codec_internal.h backends.h bitrate.h
""")

LibraryModule(
    name                  = 'vorbis',
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/libvorbis-1.3.3",
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/libvorbis-1.3.3/include",
    ],  
    build_source_dirs     = [],         
    build_source_files    = {
        "lib" : vorbis_SOURCES
    },    
    extra_cpp_defines     = [],   
    included_modules      = ["ogg"], 
    shared                = False,                    
    install               = True
)

# lib vorbisfile
libvorbisfile_la_SOURCES = Split("""
    vorbisfile.c
""")

LibraryModule(
    name                  = 'vorbisfile',
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/libvorbis-1.3.3",
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/libvorbis-1.3.3/include",
    ],  
    build_source_dirs     = [],         
    build_source_files    = {
        "lib" : libvorbisfile_la_SOURCES
    },    
    extra_cpp_defines     = [],   
    included_modules      = ["vorbis"], 
    shared                = False,                    
    install               = True
)

# lib mpg123
mpg123_SOURCES = Split("""
    intsym.h \
    compat.c \
    compat.h \
    mpeghead.h \
    parse.c \
    parse.h \
    frame.c \
    format.c \
    frame.h \
    reader.h \
    debug.h \
    decode.h \
    sample.h \
    dct64.c \
    synth.h \
    synth_mono.h \
    synth_ntom.h \
    synth_8bit.h \
    synths.h \
    equalizer.c \
    huffman.h \
    newhuffman.h \
    icy.h \
    icy2utf8.h \
    id3.h \
    id3.c \
    true.h \
    getbits.h \
    optimize.h \
    optimize.c \
    readers.c \
    tabinit.c \
    libmpg123.c \
    gapless.h \
    mpg123lib_intern.h \
    abi_align.h \
    mangle.h \
    getcpuflags.h \
    index.h \
    index.c
""")

EXTRA_libmpg123_la_SOURCES = Split("""
    lfs_alias.c \
    lfs_wrap.c \
    icy.c \
    icy2utf8.c \
    l2tables.h \
    layer1.c \
    layer2.c \
    layer3.c \
    dither.h \
    dither.c \
    feature.c \
    dct36_3dnowext.S \
    dct36_3dnow.S \
    dct36_sse.S \
    dct36_x86_64.S \
    dct36_avx.S \
    dct64_3dnowext.S \
    dct64_3dnow.S \
    dct64_altivec.c \
    dct64_i386.c \
    dct64_i486.c \
    dct64_mmx.S \
    dct64_sse.S \
    dct64_sse_float.S \
    dct64_x86_64.S \
    dct64_x86_64_float.S \
    dct64_neon.S \
    dct64_neon_float.S \
    dct64_avx.S \
    dct64_avx_float.S \
    synth_3dnowext.S \
    synth_3dnow.S \
    synth_altivec.c \
    synth_i486.c \
    synth_i586_dither.S \
    synth_i586.S \
    synth_mmx.S \
    synth_sse3d.h \
    synth_sse.S \
    synth_sse_float.S \
    synth_sse_s32.S \
    synth_sse_accurate.S \
    synth_stereo_sse_float.S \
    synth_stereo_sse_s32.S \
    synth_stereo_sse_accurate.S \
    synth_x86_64.S \
    synth_x86_64_float.S \
    synth_x86_64_s32.S \
    synth_x86_64_accurate.S \
    synth_stereo_x86_64.S \
    synth_stereo_x86_64_float.S \
    synth_stereo_x86_64_s32.S \
    synth_stereo_x86_64_accurate.S \
    synth_arm.S \
    synth_arm_accurate.S \
    synth_neon.S \
    synth_neon_float.S \
    synth_neon_s32.S \
    synth_neon_accurate.S \
    synth_stereo_neon.S \
    synth_stereo_neon_float.S \
    synth_stereo_neon_s32.S \
    synth_stereo_neon_accurate.S \
    synth_stereo_avx.S \
    synth_stereo_avx_float.S \
    synth_stereo_avx_s32.S \
    synth_stereo_avx_accurate.S \
    ntom.c \
    synth.c \
    synth_8bit.c \
    synth_real.c \
    synth_s32.c \
    equalizer_3dnow.S \
    tabinit_mmx.S \
    stringbuf.c \
    getcpuflags.S \
    getcpuflags_x86_64.S \
    l12_integer_tables.h \
    l3_integer_tables.h
""")

LibraryModule(
    name                  = 'mpg123',
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/mpg123-1.17.0",
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/mpg123-1.17.0/src/libmpg123",
    ],  
    build_source_dirs     = [],         
    build_source_files    = {
        "src/libmpg123" : mpg123_SOURCES
    },    
    extra_cpp_defines     = [
        "_FILE_OFFSET_BITS=64"
    ], 
    shared                = False,                    
    install               = True
)


# libmad
libmad_la_SOURCES = Split("""
    version.c fixed.c bit.c timer.c stream.c frame.c  \
    synth.c decoder.c layer12.c layer3.c huffman.c 
""")

LibraryModule(
    name                  = 'mad',
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/libmad-0.15.0b",
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/libmad-0.15.0b",
    ],  
    build_source_dirs     = [],         
    build_source_files    = {
        "." : libmad_la_SOURCES
    },    
    extra_cpp_defines     = ["FPM_DEFAULT"], 
    shared                = False,                    
    install               = True
)

# lib sndfile
sndfile_SOURCES = Split("""
    common.c file_io.c command.c pcm.c ulaw.c alaw.c float32.c \
    double64.c ima_adpcm.c ms_adpcm.c gsm610.c dwvw.c vox_adpcm.c \
    interleave.c strings.c dither.c broadcast.c audio_detect.c \
    ima_oki_adpcm.c ima_oki_adpcm.h chunk.c ogg.c chanmap.c \
    windows.c id3.c

    sndfile.c aiff.c au.c avr.c caf.c dwd.c flac.c g72x.c htk.c ircam.c \
    macbinary3.c macos.c mat4.c mat5.c nist.c paf.c pvf.c raw.c rx2.c sd2.c \
    sds.c svx.c txw.c voc.c wve.c w64.c wav_w64.c wav.c xi.c mpc2k.c rf64.c \
    ogg_vorbis.c ogg_speex.c ogg_pcm.c
""")

GSM610_libgsm_la_SOURCES = Split("""
    config.h gsm.h gsm610_priv.h \
    add.c code.c decode.c gsm_create.c \
    gsm_decode.c gsm_destroy.c gsm_encode.c \
    gsm_option.c long_term.c lpc.c preprocess.c \
    rpe.c short_term.c table.c
""")

G72x_libg72x_la_SOURCES = Split("""
    g72x.h g72x_priv.h \
    g721.c g723_16.c g723_24.c g723_40.c g72x.c
""")

LibraryModule(
    name                  = 'sndfile',
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/libsndfile-1.0.25",
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/libsndfile-1.0.25/src",
    ],  
    build_source_dirs     = [],         
    build_source_files    = {
        "src" : sndfile_SOURCES,
        "src/GSM610" : GSM610_libgsm_la_SOURCES,
        "src/G72x" : G72x_libg72x_la_SOURCES
    },    
    extra_cpp_defines     = [], 
    shared                = False,                    
    install               = True
)

# lib json
libjson_SOURCES = Split("""
    json.c
""")

LibraryModule(
    name                  = 'json',
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + "/libjson",
    ],  
    source_root           = THIRD_PARTY_SOURCE_ROOT + "/libjson",
    build_source_dirs     = [],         
    build_source_files    = {
        "." : libjson_SOURCES
    },    
    extra_cpp_defines     = [],     
    shared                = False,                    
    install               = True
)

# lib google test       
LibraryModule(
    name                  = 'gtest',
    build_include_dirs    = [
        THIRD_PARTY_SOURCE_ROOT + '/googletest/include',
        THIRD_PARTY_SOURCE_ROOT + '/googletest'
    ],  
    source_root           = THIRD_PARTY_SOURCE_ROOT,
    build_source_files    = {
        "googletest/src" : "gtest-all.cc"
    },
    extra_cpp_defines     = ['GTEST_CREATE_SHARED_LIBRARY=1'],              
    linked_modules        = env['DRAGON_EXTRA_LIBS'],
    shared                = env['SHARED'],
    install               = True
)


# dragon c++ class library
dragon_SOURCES = {
    "dragon/lang" : Split("""
        Object.cc
        Math.cc 
        String.cc 

        Throwable.cc 
        Exception.cc 
        RuntimeException.cc 
        IllegalArgumentException.cc

        Void.cc
        Number.cc
        Short.cc
        Integer.cc
        Long.cc
        Float.cc
        Double.cc
        
        AbstractStringBuilder.cc
        StringBuffer.cc 
        
        Class.cc
        ClassLoader.cc 
        System.cc

        Thread.cc

        NullPointerException.cc
        IndexOutOfBoundsException.cc
        UnsupportedEncodingException.cc
        UnsupportedOperationException.cc

        Null.cc
        Boolean.cc
    """),
    "dragon/lang/gc" : Split("""
        GarbageCollector.cc
        MemoryAlloc.cc
    """),
    "dragon/lang/reflect" : Split("""
        Type.cc
        Member.cc
        Constructor.cc
        Field.cc
        Method.cc
        Propery.cc
    """),
    "dragon/lang/internal" : Split("""
        platform.cc
        Library.cc
        LibraryClassLoader.cc
        SystemClassLoader.cc 
    """),
    "dragon/util/regex" : Split("""
        PatternSyntaxException.cc 
        Pattern.cc 
        Matcher.cc 
    """),
    "dragon/util/logging" : Split("""
        Logger.cc 
        LogManager.cc
        ConsoleHandler.cc
    """),
     "dragon/util/concurrent" : Split("""
        Semaphore.cc
        CountDownLatch.cc  
    """),   
    "dragon/util/concurrent/locks" : Split("""
        SynchLock.cc 
    """),
    "dragon/util/concurrent/atomic" : Split("""
        AtomicBoolean.cc 
        AtomicInteger.cc 
        AtomicLong.cc 
    """),

    "dragon/io" : Split("""
        File.cc

        InputStream.cc
        ByteArrayInputStream.cc
        FilterInputStream.cc
        BufferedInputStream.cc
        FileInputStream.cc

        OutputStream.cc
        ByteArrayOutputStream.cc
        FilterOutputStream.cc
        BufferedOutputStream.cc
        FileOutputStream.cc

        IOException.cc
        FileNotFoundException.cc

        Writer.cc
        OutputStreamWriter.cc
        FileWriter.cc

        Reader.cc
        InputStreamReader.cc
        FileReader.cc
    """),

    # json
    "dragonx/json" : Split("""
        JSONException.cc 
        JSONArray.cc 
        JSONObject.cc 
    """),

    # xml
    "dragonx/xml" : Split("""
        DocumentException.cc
        DocumentFactory.cc
        DocumentHelper.cc
    """),
    "dragonx/xml/io" : Split("""
        OutputFormat.cc

        XMLReader.cc 
        XMLWriter.cc
    """),

    # imageio
    "dragonx/image" : Split("""
        Image.cc
        ColorModel.cc
        RenderedImage.cc
        BufferedImage.cc
        ImageIO.cc
    """),
    "dragonx/image/io" : Split("""
        ImageIO.cc
    """),
    "dragonx/image/io/spi" : Split("""
        ImageIORegistry.cc
    """),
    "dragonx/image/io/stream" : Split("""
        ImageInputStream.cc
        ImageOutputStream.cc
    """),
    "dragonx/image/io/plugins" : Split("""
        AbstractImageReader.cc
        AbstractImageWriter.cc
    """),
    "dragonx/image/io/plugins/jpeg" : Split("""
        JPEGImageReader.cc
        JPEGImageWriter.cc
    """),
    "dragonx/image/io/plugins/bmp" : Split("""
        BMPImageReader.cc
        BMPImageWriter.cc
    """),
    "dragonx/image/io/plugins/png" : Split("""
        PNGImageReader.cc
        PNGImageWriter.cc
    """),
    "dragonx/image/io/plugins/gif" : Split("""
        GIFImageReader.cc
        GIFImageWriter.cc
    """),
    "dragonx/image/io/plugins/tga" : Split("""
        TGAImageReader.cc
        TGAImageWriter.cc
    """),


    # audio
    "dragonx/audio" : Split("""
        AudioFormat.cc
        AUdioClip.cc
    """),
    "dragonx/audio/io" : Split("""
        AudioIO.cc
    """),
    "dragonx/audio/io/spi" : Split("""
        AudioClipIORegistry.cc
    """),
    "dragonx/audio/io/plugins" : Split("""
        AbstractAudioReader.cc
    """),
    "dragonx/audio/io/plugins/wav" : Split("""
        WavAudioReader.cc
    """),
    "dragonx/audio/io/plugins/mp3" : Split("""
        Mp3AudioReader.cc
    """),
    "dragonx/audio/io/plugins/ogg" : Split("""
        OggAudioReader.cc
    """)
}
    
LibraryModule(
    name                  = 'dragon',
    build_include_dirs    = [
        'include',
        THIRD_PARTY_SOURCE_ROOT + '/fastdelegate',
    ],
    build_source_files    = dragon_SOURCES,
    extra_cpp_defines     = [
        'DRAGON_SHARED', 
        'BUILDING_DRAGON_SHARED',
        'ENABLE_LOG'
    ],
    source_root           = 'src',
    included_modules      = [
        "pcre32", "unicode", "json", "tinyxml2", 
        "z", "jpeg", "png", "gif", "tga", "sndfile", "mad", "vorbisfile"
    ], 
    linked_modules        = env['DRAGON_EXTRA_LIBS'],
    shared                = env['SHARED'],
    install               = True
)


# dragon test
dragon_test_SOURCES = {
    "dragon/lang" : Split("""
        ObjectTest.cc
        MathTest.cc 
        StringTest.cc 

        ThrowableTest.cc 
        ExceptionTest.cc 
        RuntimeExceptionTest.cc 
        IllegalArgumentExceptionTest.cc 

        IntegerTest.cc
        LongTest.cc
        StringBufferTest.cc

        ClassLoaderTest.cc 
        SystemTest.cc
        ThreadTest.cc
    """),
    "dragon/lang/gc" : Split("""
        ReferenceTest.cc
        MemoryAllocTest.cc
    """),
    "dragon/lang/internal" : Split("""
        platformTest.cc
        LibraryTest.cc
        LibraryClassLoaderTest.cc
        SystemClassLoaderTest.cc
    """),
    "dragon/util" : Split("""
        ArrayListTest.cc 
        HashMapTest.cc
    """),      
    "dragon/util/regex" : Split("""
        PatternSyntaxExceptionTest.cc 
        RegexTest.cc 
    """),

    "dragon/io" : Split("""
        FileTest.cc
        FileInputStreamTest.cc
        FileOutputStreamTest.cc

        FileWriterTest.cc
        FileReaderTest.cc
    """),

    "dragonx/json" : Split("""
        JSONObjectTest.cc 
    """),

    "dragonx/xml/io" : Split("""
        XMLReaderTest.cc 
        XMLWriterTest.cc
    """),

    "dragonx/image/io" : Split("""
        ImageIOTest.cc 
    """),

    "dragonx/image" : Split("""
        ColorModelTest.cc
        BufferedImageTest.cc
    """),

    "dragonx/audio/io" : Split("""
        AudioIOTest.cc
    """),

    "." : Split("""
        TestMain.cc
    """)
}
 

Application(
    name                  = 'dragon_test', 
    source_root           = 'test',
    build_include_dirs    = [
        'test'
    ],
    build_source_files    = dragon_test_SOURCES,
    deps                  = [ 
        'gtest',
        'dragon'
    ],          
    install               = True
)
